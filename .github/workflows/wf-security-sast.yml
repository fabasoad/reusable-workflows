---
on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      code-scanning:
        description: Whether to run SAST analysis or not. Defaults to true.
        required: false
        default: false
        type: boolean
      code-scanning-build-mode:
        description: |
          Available build modes will differ based on the language being analyzed.
          One of: none, autobuild, manual.
        required: false
        default: "none"
        type: string
      code-scanning-build-command:
        description: |
          The build command to create the project that is required if the language
          is a built language, such as Go or Java. It runs only in case "code-scanning-build-mode"
          is set to "manual".
        required: false
        default: "make build"
        type: string
      code-scanning-languages:
        description: |
          A comma-separated list of languages for SAST analysis. Defaults to
          "javascript".
        required: false
        default: "javascript"
        type: string
      dependency-review:
        description: |
          Whether to run Dependency review analysis or not. Defaults to true if
          it workflow is trigger by pull_request event, otherwise - false.
        required: false
        default: ${{ github.event_name == 'pull_request' }}
        type: boolean
      image:
        description: Whether to run Image analysis or not. Defaults to false.
        required: false
        default: false
        type: boolean
      image-artifact-name:
        description: |
          The artifact name that was uploaded by previous build job. In fact the
          result of "docker image save" or "podman save" command. Defaults to "".
        required: false
        default: ""
        type: string
      image-severity-threshold:
        description: |
          Fail a pipeline if a vulnerability is found with a severity >= the
          given severity. One of: negligible, low, medium, high, critical.
        required: false
        default: medium
        type: string
      sca:
        description: Whether to run SCA analysis or not. Defaults to true.
        required: false
        default: false
        type: boolean
      sca-path:
        description: Path to the directory for SCA. Defaults to "".
        required: false
        default: "."
        type: string
      sca-severity-threshold:
        description: |
          Fail a pipeline if a vulnerability is found with a severity >= the
          given severity. One of: negligible, low, medium, high, critical.
        required: false
        default: medium
        type: string
      iac:
        description: Whether to run IaC analysis or not. Defaults to false.
        required: false
        default: false
        type: boolean
      iac-tf-vars:
        description: Path to TF vars file. Defaults to "terraform/vars.auto.tfvars".
        required: false
        default: "terraform/vars.auto.tfvars"
        type: string
      ghas-category:
        description: String used by GHAS for matching analyses. Defaults to "default".
        required: false
        default: "default"
        type: string
      versions-file:
        description: Path to the file with tool versions, e.g. .tool-versions
        required: false
        default: ".tool-versions"
        type: string

jobs:
  code-scanning:
    name: Code Scanning
    if: inputs.code-scanning
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      DEFAULT_JAVA_VERSION: "23"
      DEFAULT_GRADLE_VERSION: "8.11.1"
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Prepare metadata
        if: contains(format(',{0},', inputs.code-scanning-languages), ',java,')
        id: metadata
        env:
          INPUT_VERSIONS_FILE: "${{ inputs.versions-file }}"
        run: |
          gradle_version="${DEFAULT_GRADLE_VERSION}"
          java_version="${DEFAULT_JAVA_VERSION}"
          if [ "${INPUT_VERSIONS_FILE%*.tool-versions}" != "${INPUT_VERSIONS_FILE}" ]; then
            gradle_version_temp="$(grep -Eo 'gradle [a-z0-9.-]+' "${INPUT_VERSIONS_FILE}" | cut -d ' ' -f 2)"
            if [ -n "${gradle_version}" ]; then
              gradle_version="${gradle_version_temp}"
            fi
            java_version_temp="$(grep -Eo 'java [a-z0-9.-]+' "${INPUT_VERSIONS_FILE}" | cut -d '-' -f 2)"
            if [ -n "${java_version_temp}" ]; then
              java_version="${java_version_temp}"
            fi
          fi
          echo "gradle-version=${gradle_version}" >> "$GITHUB_OUTPUT"
          echo "java-version=${java_version}" >> "$GITHUB_OUTPUT"
      - name: Setup Java
        if: contains(format(',{0},', inputs.code-scanning-languages), ',java,')
        uses: actions/setup-java@v4
        with:
          java-version: "${{ steps.metadata.outputs.java-version }}"
          distribution: "temurin"
      - name: Setup Gradle
        if: contains(format(',{0},', inputs.code-scanning-languages), ',java,')
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "${{ steps.metadata.outputs.gradle-version }}"
      - name: Initialize
        uses: github/codeql-action/init@v3
        with:
          languages: "${{ inputs.code-scanning-languages }}"
          build-mode: "${{ inputs.code-scanning-build-mode }}"
          config: |
            paths-ignore:
              - dist/index.js
      - name: Autobuild
        if: ${{ inputs.code-scanning-build-mode == 'autobuild' }}
        uses: github/codeql-action/autobuild@v3
      - name: Manual build
        if: ${{ inputs.code-scanning-build-mode == 'manual' }}
        env:
          # It is used in fabasoad/pojo project
          SKIP_FINALIZE: true
        run: "${{ inputs.code-scanning-build-command }}"
      - name: Perform analysis
        id: code-scanning
        uses: github/codeql-action/analyze@v3
        with:
          category: "code-scanning-${{ inputs.ghas-category }}"
  sca:
    name: SCA
    if: inputs.sca
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Perform analysis
        id: sca
        uses: anchore/scan-action@v6
        with:
          by-cve: "true"
          path: "${{ inputs.sca-path }}"
          severity-cutoff: "${{ inputs.sca-severity-threshold }}"
      - name: Upload to GHAS
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: "sca-${{ inputs.ghas-category }}"
          sarif_file: "${{ steps.sca.outputs.sarif }}"
  dependency-review:
    name: Dependency review
    if: inputs.dependency-review
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Perform review
        uses: actions/dependency-review-action@v4
        with:
          config-file: "fabasoad/reusable-workflows/.github/dependency-review-config.yml@main"
          external-repo-token: "${{ github.token }}"
  image:
    name: Image
    if: inputs.image && inputs.image-artifact-name != ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: "${{ inputs.image-artifact-name }}"
      - name: Setup Grype
        id: setup-grype
        uses: anchore/scan-action/download-grype@v6
      - name: Perform analysis
        id: image
        env:
          INPUT_SEVERITY_THRESHOLD: "${{ inputs.image-severity-threshold }}"
        run: |
          sarif_path="${RUNNER_TEMP}/$(date +%s).sarif"
          echo "sarif-path=${sarif_path}" >> "$GITHUB_OUTPUT"
          ${{ steps.setup-grype.outputs.cmd }} \
            "docker-archive:${{ steps.download-artifact.outputs.download-path }}/${{ inputs.image-artifact-name }}.tar" \
            --by-cve \
            --fail-on="${INPUT_SEVERITY_THRESHOLD}" \
            --output sarif \
            --file "${sarif_path}"
      - name: Upload to GHAS
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: "image-${{ inputs.ghas-category }}"
          sarif_file: "${{ steps.image.outputs.sarif-path }}"
  iac:
    name: IaC
    if: inputs.iac
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Perform analysis
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "config"
          hide-progress: "false"
          exit-code: "2"
          format: "sarif"
          output: "iac-${{ inputs.ghas-category }}.sarif"
          ignore-unfixed: "true"
          tf-vars: "${{ inputs.iac-tf-vars }}"
          trivy-config: "trivy.yaml"
      - name: Upload to GHAS
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: "iac-${{ inputs.ghas-category }}"
          sarif_file: "iac-${{ inputs.ghas-category }}.sarif"
