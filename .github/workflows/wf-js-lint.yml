---
on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      lint-command:
        description: |
          Command that is specified in manifest file to run with package manager,
          e.g. yarn run <lint-command>
        required: false
        default: "lint"
        type: string
      node-version-file:
        description: |
          File containing the version Spec of the version to use. Examples:
          package.json, .nvmrc, .node-version, .tool-versions.
        required: false
        default: ".tool-versions"
        type: string

defaults:
  run:
    shell: sh

jobs:
  biome:
    name: Biome
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Prepare metadata
        id: metadata
        run: | # pragma: allowlist secret
          if [ -f "package-lock.json" ]; then
            package_manager="npm"
            cache_dependency_path="package-lock.json"
            cmd_install_dependencies="ci"
          elif [ -f "yarn.lock" ]; then
            package_manager="yarn"
            cache_dependency_path="yarn.lock"
            cmd_install_dependencies="install --immutable"
            echo "YARN_CHECKSUM_BEHAVIOR=update" >> "$GITHUB_ENV"
          elif [ -f "pnpm-lock.yaml" ]; then
            package_manager="pnpm"
            cache_dependency_path="pnpm-lock.yaml"
            cmd_install_dependencies="install --frozen-lockfile"
          else
            echo "No lock file found."
            exit 1
          fi
          echo "package-manager=${package_manager}" >> "$GITHUB_OUTPUT"
          echo "cache-dependency-path=${cache_dependency_path}" >> "$GITHUB_OUTPUT"
          echo "cmd-install-dependencies=${cmd_install_dependencies}" >> "$GITHUB_OUTPUT"
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "${{ inputs.node-version-file }}"
          cache: "${{ steps.metadata.outputs.package-manager }}"
          cache-dependency-path: "${{ steps.metadata.outputs.cache-dependency-path }}"
      - name: Install dependencies
        run: ${{ steps.metadata.outputs.package-manager }} ${{ steps.metadata.outputs.cmd-install-dependencies }}
      - name: Perform linting
        env:
          INPUT_LINT_COMMAND: "${{ inputs.lint-command }}"
        run: ${{ steps.metadata.outputs.package-manager }} run ${INPUT_LINT_COMMAND}
